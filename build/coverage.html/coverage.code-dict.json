{"/home/travis/build/npmtest/node-npmtest-gulp-gh-pages/test.js":"/* istanbul instrument in package npmtest_gulp_gh_pages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-gh-pages/lib.npmtest_gulp_gh_pages.js":"/* istanbul instrument in package npmtest_gulp_gh_pages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_gh_pages = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_gh_pages = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-gh-pages/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-gh-pages && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_gh_pages */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_gh_pages\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_gh_pages.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_gh_pages.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_gh_pages.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_gh_pages.__dirname +\n                    '/lib.npmtest_gulp_gh_pages.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-gh-pages/node_modules/gulp-gh-pages/index.js":"'use strict';\n\nvar git = require('./lib/git');\nvar gutil = require('gulp-util');\nvar Transform = require('readable-stream/transform');\nvar vinylFs = require('vinyl-fs');\nvar wrapPromise = require('wrap-promise');\n\n/*\n * Public: Push to gh-pages branch for github\n *\n * options - {Object} that contains all the options of the plugin\n *   - remoteUrl: The {String} remote url (github repository) of the project,\n *   - origin: The {String} origin of the git repository (default to `\"origin\"`),\n *   - branch: The {String} branch where deploy will by done (default to `\"gh-pages\"`),\n *   - cacheDir: {String} where the git repo will be located. (default to a temporary folder)\n *   - push: {Boolean} to know whether or not the branch should be pushed (default to `true`)\n *   - message: {String} commit message (default to `\"Update [timestamp]\"`)\n *\n * Returns `Stream`.\n**/\nmodule.exports = function gulpGhPages(options) {\n  options = options || {};\n  var origin = options.origin || 'origin';\n  var branch = options.branch || 'gh-pages';\n  var message = options.message || 'Update ' + new Date().toISOString();\n\n  var files = [];\n  var TAG;\n  if (branch !== 'gh-pages') {\n    TAG = '[gh-pages (' + branch + ')]';\n  } else {\n    TAG = '[gh-pages]';\n  }\n\n  return new Transform({\n    objectMode: true,\n    transform: function collectFiles(file, enc, cb) {\n      if (file.isNull()) {\n        cb(null, file);\n        return;\n      }\n\n      if (file.isStream()) {\n        cb(new gutil.PluginError('gulp-gh-pages', 'Stream content is not supported'));\n        return;\n      }\n\n      files.push(file);\n      cb(null, file);\n    },\n    flush: function publish(cb) {\n      if (files.length === 0) {\n        gutil.log(TAG, 'No files in the stream.');\n        cb();\n        return;\n      }\n\n      var newBranchCreated = false;\n\n      git.prepareRepo(options.remoteUrl, origin, options.cacheDir || '.publish')\n      .then(function(repo) {\n        gutil.log(TAG, 'Cloning repo');\n        if (repo._localBranches.indexOf(branch) > -1) {\n          gutil.log(TAG, 'Checkout branch `' + branch + '`');\n          return repo.checkoutBranch(branch);\n        }\n\n        if (repo._remoteBranches.indexOf(origin + '/' + branch) > -1) {\n          gutil.log(TAG, 'Checkout remote branch `' + branch + '`');\n          return repo.checkoutBranch(branch);\n        }\n\n        gutil.log(TAG, 'Create branch `' + branch + '` and checkout');\n        newBranchCreated = true;\n        return repo.createAndCheckoutBranch(branch);\n      })\n      .then(function(repo) {\n        return wrapPromise(function(resolve, reject) {\n          if (newBranchCreated) {\n            resolve(repo);\n            return;\n          }\n\n          // updating to avoid having local cache not up to date\n          gutil.log(TAG, 'Updating repository');\n          repo._repo.git('pull', function(err) {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(repo);\n          });\n        });\n      })\n      .then(function(repo) {\n        // remove all files\n        return wrapPromise(function(resolve, reject) {\n          repo._repo.remove('.', {r: true}, function(err) {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve(repo.status());\n          });\n        });\n      })\n      .then(function(repo) {\n        gutil.log(TAG, 'Copying files to repository');\n\n        return wrapPromise(function(resolve, reject) {\n          var destStream = vinylFs.dest(repo._repo.path)\n          .on('error', reject)\n          .on('end', function() {\n            resolve(repo);\n          })\n          .resume();\n\n          files.forEach(function(file) {\n            destStream.write(file);\n          });\n\n          destStream.end();\n        });\n      })\n      .then(function(repo) {\n        return repo.addFiles('.', {force: options.force || false});\n      })\n      .then(function(repo) {\n        var filesToBeCommitted = Object.keys(repo._staged).length;\n        if (filesToBeCommitted === 0) {\n          gutil.log(TAG, 'No files have changed.');\n          cb();\n          return;\n        }\n\n        gutil.log(TAG, 'Adding ' + filesToBeCommitted + ' files.');\n        gutil.log(TAG, 'Committing \"' + message + '\"');\n        repo.commit(message).then(function(newRepo) {\n          if (options.push === undefined || options.push) {\n            gutil.log(TAG, 'Pushing to remote.');\n            newRepo._repo.git('push', {\n              'set-upstream': true\n            }, [origin, newRepo._currentBranch], function(err) {\n              if (err) {\n                cb(err);\n                return;\n              }\n              cb();\n            });\n            return;\n          }\n          cb();\n        }, cb);\n      })\n      .catch(function(err) {\n        setImmediate(function() {\n          cb(new gutil.PluginError('gulp-gh-pages', err));\n        });\n      });\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-gh-pages/node_modules/gulp-gh-pages/lib/git.js":"'use strict';\n\nvar git = require('gift');\nvar rimraf = require('rimraf');\nvar wrapPromise = require('wrap-promise');\n\n/*\n * Git Constructor\n**/\nfunction Git(repo, initialBranch) {\n  this._repo = repo;\n  this._staged = [];\n  this._localBranches = [];\n  this._remoteBranches = [];\n  this._currentBranch = initialBranch;\n  this._commits = [];\n}\n\n/*\n * Caller abstract method\n * for promisifying traditional callback methods\n**/\nfunction caller() {\n  var returnedArgs = Array.prototype.slice.call(arguments);\n  var fn = returnedArgs.shift();\n  var self = this;\n\n  return wrapPromise(function(resolve, reject) {\n    returnedArgs.push(function(err, args) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(args);\n    });\n\n    fn.apply(self, returnedArgs);\n  });\n}\n\n/*\n * Gets the URL for the specified remote of a repo\n */\nfunction getRemoteUrl(repo, remote) {\n  return wrapPromise(function(resolve, reject) {\n    repo.config(function(err, config) {\n      if (err) {\n        reject(new Error('Failed to find git repository in ' + config.path));\n        return;\n      }\n      resolve(config.items['remote.' + remote + '.url']);\n    });\n  });\n}\n\n/*\n * Clone repo\n * Returns repo object\n**/\nfunction prepareRepo(remoteUrl, origin, dir) {\n  var promise;\n  if (remoteUrl) {\n    // if a remoteUrl was provided, use it\n    promise = wrapPromise.Promise.resolve(remoteUrl);\n  } else {\n    // else try to extract it from the .git folder of\n    // the current directory.\n    promise = getRemoteUrl(git(process.cwd()), origin);\n  }\n\n  return promise.then(function(rUrl) {\n    remoteUrl = rUrl;\n\n    return wrapPromise(function(resolve, reject) {\n      function initRepo(repo) {\n        repo.branch(function(err, head) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(new Git(repo, head.name).status());\n        });\n      }\n\n      function clearAndInitRepo() {\n        rimraf(dir, function(rmErr) {\n          if (rmErr) {\n            reject(rmErr);\n            return;\n          }\n\n          git.clone(rUrl, dir, function(cloneErr, repo) {\n            if (cloneErr) {\n              reject(cloneErr);\n              return;\n            }\n            initRepo(repo);\n          });\n        });\n      }\n\n      // assume that if there is a .git folder get its remoteUrl\n      // and check if it mathces the one we want to use.\n      getRemoteUrl(git(dir), origin).then(function(cwdRemoteUrl) {\n        if (remoteUrl === cwdRemoteUrl) {\n          initRepo(git(dir));\n          return;\n        }\n        clearAndInitRepo();\n      }, function() {\n        clearAndInitRepo();\n      });\n    });\n  });\n}\n\n/*\n * List Local branches\n**/\nfunction listLocalBranches(repo) {\n  return caller.call(repo, repo.branches).then(function(branches) {\n    return branches.map(function(branch) {\n      return branch.name;\n    });\n  });\n}\n\nfunction listRemoteBranches(repo) {\n  return caller.call(repo, repo.git, 'branch', {r: true}, [])\n  .then(function(branches) {\n    branches = branches.split('\\n');\n    branches.shift();\n    branches.pop();\n    return branches.map(function(branchName) {\n      branchName = branchName.trim();\n      return branchName;\n    });\n  });\n}\n\n/*\n * List commits for specific branch\n**/\nfunction getCommits(repo, branchName) {\n  return caller.call(repo, repo.commits, branchName)\n  .then(function(commits) {\n    return commits.map(function(commitObj) {\n      return {\n        id: commitObj.id,\n        message: commitObj.message,\n        committed_date: commitObj.committed_date\n      };\n    });\n  });\n}\n\nGit.prepareRepo = prepareRepo;\nGit.getRemoteUrl = getRemoteUrl;\n\n/*\n * Status\n * files - Array of String paths; or a String path.\n**/\nGit.prototype.status = function() {\n  var self = this;\n\n  return wrapPromise(function(resolve, reject) {\n    self._repo.status(function(err, repo) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      self._repo = repo.repo;\n      self._staged = repo.files;\n      wrapPromise.Promise.all([\n        getCommits(self._repo, self._currentBranch),\n        listRemoteBranches(self._repo),\n        listLocalBranches(self._repo)\n      ])\n      .then(function(args) {\n        self._remoteBranches = args[1];\n        self._localBranches = args[2];\n        self._commits = args[0];\n        resolve(self);\n      }, reject);\n    });\n  });\n};\n\n/*\n * Checkout a specific branch in a repo\n * @param name {String} -  String name of the branch.\n**/\nGit.prototype.checkoutBranch = function(name) {\n  var self = this;\n\n  return wrapPromise(function(resolve, reject) {\n    self._repo.checkout(name, function(err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      self._currentBranch = name;\n      resolve(self.status());\n    });\n  });\n};\n\n/*\n * Create a branch\n * @param name {String} -  String name of the new branch.\n**/\nGit.prototype.createBranch = function(name) {\n  var self = this;\n\n  return wrapPromise(function(resolve, reject) {\n    self._repo.create_branch(name, function(err) {\n      if (err) {\n        reject(err);\n      } else {\n        self._currentBranch = name;\n        resolve(self.status());\n      }\n    });\n  });\n};\n\n/*\n * Create and checkout a branch\n * @param name {String} -  String name of the new branch.\n**/\nGit.prototype.createAndCheckoutBranch = function(name) {\n  return this.createBranch(name)\n  .then(function(repo) {\n    return repo.checkoutBranch(name);\n  });\n};\n\nGit.prototype.addFiles = function(files, options) {\n  var self = this;\n\n  return wrapPromise(function(resolve, reject) {\n    self._repo.add(files, options, function(err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(self.status());\n    });\n  });\n};\n\nGit.prototype.commit = function(commitMsg) {\n  var self = this;\n\n  return wrapPromise(function(resolve, reject) {\n    self._repo.commit(commitMsg, {all: true}, function(err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(self.status());\n      }\n    });\n  });\n};\n\nmodule.exports = Git;\n"}